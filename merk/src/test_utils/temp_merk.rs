use std::{
    ops::{Deref, DerefMut},
    rc::Rc,
};

use tempdir::TempDir;

use crate::{Merk, Result};

/// Wraps a Merk instance and deletes it from disk it once it goes out of scope.
pub struct TempMerk {
    pub inner: Merk,
    pub path: TempDir,
}

impl TempMerk {
    /// Opens a `TempMerk` at an autogenerated, temporary file path.
    pub fn new() -> Result<TempMerk> {
        let path = TempDir::new("db")?;
        let db = Rc::new(rocksdb::DB::open_cf_descriptors(
            &Merk::default_db_opts(),
            &path,
            crate::column_families(),
        )?);
        Ok(TempMerk {
            inner: Merk::open(db, Vec::new())?,
            path,
        })
    }
}

impl Deref for TempMerk {
    type Target = Merk;

    fn deref(&self) -> &Merk {
        &self.inner
    }
}

impl DerefMut for TempMerk {
    fn deref_mut(&mut self) -> &mut Merk {
        &mut self.inner
    }
}
